
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FlatSharp FBS to C# compiler (source hash: 6.3.5.eHHIyTVkZ9zgji4W85lRkEhozDjA5ATiiibuYtNAQDM=)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using FlatSharp;
using FlatSharp.Attributes;
using FlatSharp.Internal;
#pragma warning disable 0618
#nullable enable annotations
namespace FlatSharp.Compiler.Generated
{
    internal static class CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433
    {
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Wiktionary.Example? Clone(global::Wiktionary.Example? item)
        {
            checked
            {
                return item is null ? null : new Wiktionary.Example(item);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.String? Clone(global::System.String? item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Wiktionary.Examples? Clone(global::Wiktionary.Examples? item)
        {
            checked
            {
                return item is null ? null : new Wiktionary.Examples(item);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<Wiktionary.Example>? Clone(global::System.Collections.Generic.IList<Wiktionary.Example>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<Wiktionary.Example>(item, FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Wiktionary.Quotation? Clone(global::Wiktionary.Quotation? item)
        {
            checked
            {
                return item is null ? null : new Wiktionary.Quotation(item);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<System.String>? Clone(global::System.Collections.Generic.IList<System.String>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<System.String>(item, FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Wiktionary.Quotations? Clone(global::Wiktionary.Quotations? item)
        {
            checked
            {
                return item is null ? null : new Wiktionary.Quotations(item);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<Wiktionary.Quotation>? Clone(global::System.Collections.Generic.IList<Wiktionary.Quotation>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<Wiktionary.Quotation>(item, FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Wiktionary.RawQuotation? Clone(global::Wiktionary.RawQuotation? item)
        {
            checked
            {
                return item is null ? null : new Wiktionary.RawQuotation(item);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Wiktionary.Sense? Clone(global::Wiktionary.Sense? item)
        {
            checked
            {
                return item is null ? null : new Wiktionary.Sense(item);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<Wiktionary.RawQuotation>? Clone(global::System.Collections.Generic.IList<Wiktionary.RawQuotation>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<Wiktionary.RawQuotation>(item, FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.SByte Clone(global::System.SByte item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Wiktionary.Senses? Clone(global::Wiktionary.Senses? item)
        {
            checked
            {
                return item is null ? null : new Wiktionary.Senses(item);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<Wiktionary.Sense>? Clone(global::System.Collections.Generic.IList<Wiktionary.Sense>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<Wiktionary.Sense>(item, FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone);
            }
        }
    }

}

namespace Wiktionary
{
    [FlatBufferTable()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Example
        : object
    {
#pragma warning disable CS8618
        public Example()
        {
            checked
            {
                this.sentence = default!;
                this.sentenceId = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected Example(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public Example(Example source)
        {
            checked
            {
                this.sentence = FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone(source.sentence);
                this.sentenceId = FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone(source.sentenceId);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);


        [FlatBufferItemAttribute(0)]
        public virtual string? sentence { get; set; }

        [FlatBufferItemAttribute(1)]
        public virtual string? sentenceId { get; set; }
    }

}

namespace Wiktionary
{
    [FlatBufferTable()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Examples
        : object
        , IFlatBufferSerializable<Wiktionary.Examples>
    {
#pragma warning disable CS8618
        public Examples()
        {
            checked
            {
                this.examples = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected Examples(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public Examples(Examples source)
        {
            checked
            {
                this.examples = FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone(source.examples);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);


        [FlatBufferItemAttribute(0)]
        public virtual IList<Wiktionary.Example>? examples { get; set; }
        public static ISerializer<Wiktionary.Examples> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        ISerializer IFlatBufferSerializable.Serializer => Serializer;
        ISerializer<Wiktionary.Examples> IFlatBufferSerializable<Wiktionary.Examples>.Serializer => Serializer;

        #region Serializer for Wiktionary.Examples

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.GreedyMutable)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<global::Wiktionary.Examples>
        {
            // Method generated to help AOT compilers make good decisions about generics.
            public void __AotHelper()
            {
                checked
                {
                    this.Write<ISpanWriter>(default!, new byte[10], default!, default!, default!);
                    this.Write<SpanWriter>(default!, new byte[10], default!, default!, default!);

                    this.Parse<IInputBuffer>(default!, default);
                    this.Parse<IInputBuffer2>(default!, default);
                    this.Parse<MemoryInputBuffer>(default!, default);
                    this.Parse<ReadOnlyMemoryInputBuffer>(default!, default);
                    this.Parse<ArrayInputBuffer>(default!, default);
                    this.Parse<ArraySegmentInputBuffer>(default!, default);

                    throw new InvalidOperationException("__AotHelper is not intended to be invoked");
                }
            }

            public GeneratedSerializer()
            {
                checked
                {
                    string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                    string compilerVersion = "6.3.5";

                    if (runtimeVersion != compilerVersion)
                    {
                        throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }

                    if (string.IsNullOrEmpty(runtimeVersion))
                    {
                        throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }
                }
            }

            public FlatSharp.FlatBufferDeserializationOption DeserializationOption => FlatSharp.FlatBufferDeserializationOption.GreedyMutable;


            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::Wiktionary.Examples root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_8dad143cdaf1469c8ab2be22555244a6(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(global::Wiktionary.Examples root)
            {
                checked
                {
                    return GetMaxSizeOf_8dad143cdaf1469c8ab2be22555244a6(root);
                }
            }

            public global::Wiktionary.Examples Parse<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_8dad143cdaf1469c8ab2be22555244a6(buffer, args.Offset, args.DepthLimit);
                }
            }

            private static int GetMaxSizeOf_8dad143cdaf1469c8ab2be22555244a6(global::Wiktionary.Examples value)
            {
                checked
                {

                    int runningSum = 14 + 7;
                    var index0Value = value.examples;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_d6ed3ab625b84c82827fe987ed0ec48b(index0Value);
                    }
                    return runningSum;

                }
            }

            private static global::Wiktionary.Examples Read_8dad143cdaf1469c8ab2be22555244a6<TInputBuffer>(
                TInputBuffer buffer,
                int offset,
                short remainingDepth
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {

                    return tableReader_5f9d32335f5145e591e067b3bcfcae99<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
                }
            }

            private sealed class tableReader_5f9d32335f5145e591e067b3bcfcae99<TInputBuffer>
                : global::Wiktionary.Examples
                , global::FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



                private System.Collections.Generic.IList<Wiktionary.Example>? __index0Value;

                public static tableReader_5f9d32335f5145e591e067b3bcfcae99<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
                {
                    checked
                    {

                        var item = new tableReader_5f9d32335f5145e591e067b3bcfcae99<TInputBuffer>(buffer, offset, remainingDepth);
                        return item;

                    }
                }

                private tableReader_5f9d32335f5145e591e067b3bcfcae99(TInputBuffer buffer, int offset, short remainingDepth) : base(__CtorContext)
                {
                    checked
                    {
                        VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                        this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Wiktionary.Examples);
                global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;
                bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;


                public override System.Collections.Generic.IList<Wiktionary.Example>? examples
                {
                    get
                    {
                        checked
                        {
                            return this.__index0Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index0Value = value;
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<Wiktionary.Example>? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable,
                    short remainingDepth)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 0);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_d6ed3ab625b84c82827fe987ed0ec48b(buffer, absoluteLocation, remainingDepth, tableMetadata_51317d56e5964479b5bc845e1ba0e99c.examples);
                    }
                }
            }



            private static void WriteInlineValueOf_8dad143cdaf1469c8ab2be22555244a6<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Wiktionary.Examples value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(11, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 4;
                    Span<byte> vtable = stackalloc byte[6];

                    var index0Value = value.examples;

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;

                        vtableLength = 6;
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 11 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_d6ed3ab625b84c82827fe987ed0ec48b(spanWriter, span, index0Value!, index0Offset, context);

                    }

                }
            }

            private static class tableMetadata_51317d56e5964479b5bc845e1ba0e99c
            {

                public static readonly TableFieldContext examples = new TableFieldContext(
                    "Wiktionary.Examples.examples",
                    false,
                    false);
            }



            private static int GetMaxSizeOf_d6ed3ab625b84c82827fe987ed0ec48b(global::System.Collections.Generic.IList<Wiktionary.Example> value)
            {
                checked
                {

                    int count = value.Count;
                    int runningSum = 14;

                    if (value is Wiktionary.Example[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_f367d2c974e0468da34b7de179562848(current);
                        }
                    }
                    else if (value is List<Wiktionary.Example> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_f367d2c974e0468da34b7de179562848(current);
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_f367d2c974e0468da34b7de179562848(current);
                        }
                    }

                    return runningSum;
                }
            }

            private static global::System.Collections.Generic.IList<Wiktionary.Example> Read_d6ed3ab625b84c82827fe987ed0ec48b<TInputBuffer>(
                TInputBuffer buffer,
                int offset,
                short remainingDepth
                , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
            {
                checked
                {

                    return (new FlatBufferVector_45034ec4ba06482fb0a353ac704172b7<TInputBuffer>(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    4,
                    remainingDepth,
                    fieldContext)).FlatBufferVectorToList();
                }
            }

            public sealed class FlatBufferVector_45034ec4ba06482fb0a353ac704172b7<TInputBuffer> : FlatBufferVector<global::Wiktionary.Example, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_45034ec4ba06482fb0a353ac704172b7(
                    TInputBuffer memory,
                    int offset,
                    int itemSize,
                    short remainingDepth,
                    TableFieldContext fieldContext) : base(memory, offset, itemSize, remainingDepth, fieldContext)
                {
                    checked
                    {
                    }
                }

                protected override void ParseItem(
                    TInputBuffer memory,
                    int offset,
                    short remainingDepth,
                    TableFieldContext fieldContext,
                    out global::Wiktionary.Example item)
                {
                    checked
                    {
                        item = Read_f367d2c974e0468da34b7de179562848(memory, offset, remainingDepth);
                    }
                }

                protected override void WriteThrough(global::Wiktionary.Example item, Span<byte> data)
                {
                    checked
                    {
                        throw new NotSupportedException("write through is not available for this type");
                    }
                }
            }



            private static void WriteInlineValueOf_d6ed3ab625b84c82827fe987ed0ec48b<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Collections.Generic.IList<Wiktionary.Example> value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset);
                    spanWriter.WriteInt(span, count, vectorOffset);
                    vectorOffset += sizeof(int);


                    if (value is Wiktionary.Example[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_f367d2c974e0468da34b7de179562848(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                    else if (value is List<Wiktionary.Example> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_f367d2c974e0468da34b7de179562848(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_f367d2c974e0468da34b7de179562848(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                }
            }

            private static int GetMaxSizeOf_f367d2c974e0468da34b7de179562848(global::Wiktionary.Example value)
            {
                checked
                {

                    int runningSum = 21 + 9;
                    var index0Value = value.sentence;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_e5ffe8d22ec14ce993a469a62d8316ec(index0Value);
                    }
                    var index1Value = value.sentenceId;

                    if (!(index1Value is null))
                    {
                        runningSum += GetMaxSizeOf_e5ffe8d22ec14ce993a469a62d8316ec(index1Value);
                    }
                    return runningSum;

                }
            }

            private static global::Wiktionary.Example Read_f367d2c974e0468da34b7de179562848<TInputBuffer>(
                TInputBuffer buffer,
                int offset,
                short remainingDepth
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {

                    return tableReader_cdf929cf19d14ff08c5b24005e7efcc4<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
                }
            }

            private sealed class tableReader_cdf929cf19d14ff08c5b24005e7efcc4<TInputBuffer>
                : global::Wiktionary.Example
                , global::FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



                private System.String? __index0Value;
                private System.String? __index1Value;

                public static tableReader_cdf929cf19d14ff08c5b24005e7efcc4<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
                {
                    checked
                    {

                        var item = new tableReader_cdf929cf19d14ff08c5b24005e7efcc4<TInputBuffer>(buffer, offset, remainingDepth);
                        return item;

                    }
                }

                private tableReader_cdf929cf19d14ff08c5b24005e7efcc4(TInputBuffer buffer, int offset, short remainingDepth) : base(__CtorContext)
                {
                    checked
                    {
                        VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                        this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                        this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Wiktionary.Example);
                global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;
                bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;


                public override System.String? sentence
                {
                    get
                    {
                        checked
                        {
                            return this.__index0Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index0Value = value;
                        }
                    }
                }

                public override System.String? sentenceId
                {
                    get
                    {
                        checked
                        {
                            return this.__index1Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index1Value = value;
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable,
                    short remainingDepth)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 0);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_e5ffe8d22ec14ce993a469a62d8316ec(buffer, absoluteLocation, remainingDepth);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex1Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable,
                    short remainingDepth)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 1);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_e5ffe8d22ec14ce993a469a62d8316ec(buffer, absoluteLocation, remainingDepth);
                    }
                }
            }



            private static void WriteInlineValueOf_f367d2c974e0468da34b7de179562848<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Wiktionary.Example value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(18, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 4;
                    Span<byte> vtable = stackalloc byte[8];

                    var index0Value = value.sentence;
                    var index1Value = value.sentenceId;

                    var index1Offset = tableStart;
                    if (!(index1Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        currentOffset += 4;

                        vtableLength = 8;
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;


                        if (6 > vtableLength)
                        {
                            vtableLength = 6;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 18 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index1Offset != tableStart)
                    {


                        WriteInlineValueOf_e5ffe8d22ec14ce993a469a62d8316ec(spanWriter, span, index1Value!, index1Offset, context, tableMetadata_40a19206d82a4ba1963d2a9545f0c614.sentenceId);

                    }


                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_e5ffe8d22ec14ce993a469a62d8316ec(spanWriter, span, index0Value!, index0Offset, context, tableMetadata_40a19206d82a4ba1963d2a9545f0c614.sentence);

                    }

                }
            }

            private static class tableMetadata_40a19206d82a4ba1963d2a9545f0c614
            {

                public static readonly TableFieldContext sentence = new TableFieldContext(
                    "Wiktionary.Example.sentence",
                    false,
                    false);

                public static readonly TableFieldContext sentenceId = new TableFieldContext(
                    "Wiktionary.Example.sentenceId",
                    false,
                    false);
            }



            private static int GetMaxSizeOf_e5ffe8d22ec14ce993a469a62d8316ec(global::System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static global::System.String Read_e5ffe8d22ec14ce993a469a62d8316ec<TInputBuffer>(
                TInputBuffer buffer,
                int offset,
                short remainingDepth
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {

                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_e5ffe8d22ec14ce993a469a62d8316ec<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.String value,
                int offset
                , SerializationContext context
                , TableFieldContext fieldContext) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    spanWriter.WriteString(
                        span,
                        value,
                        offset,
                        context);

                }
            }
        }

        #endregion
    }

}

namespace Wiktionary
{
    [FlatBufferTable()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Quotation
        : object
    {
#pragma warning disable CS8618
        public Quotation()
        {
            checked
            {
                this.sentence = default!;
                this.sentenceId = default!;
                this.attributes = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected Quotation(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public Quotation(Quotation source)
        {
            checked
            {
                this.sentence = FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone(source.sentence);
                this.sentenceId = FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone(source.sentenceId);
                this.attributes = FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone(source.attributes);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);


        [FlatBufferItemAttribute(0)]
        public virtual string? sentence { get; set; }

        [FlatBufferItemAttribute(1)]
        public virtual string? sentenceId { get; set; }

        [FlatBufferItemAttribute(2)]
        public virtual IList<string>? attributes { get; set; }
    }

}

namespace Wiktionary
{
    [FlatBufferTable()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Quotations
        : object
        , IFlatBufferSerializable<Wiktionary.Quotations>
    {
#pragma warning disable CS8618
        public Quotations()
        {
            checked
            {
                this.quotations = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected Quotations(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public Quotations(Quotations source)
        {
            checked
            {
                this.quotations = FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone(source.quotations);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);


        [FlatBufferItemAttribute(0)]
        public virtual IList<Wiktionary.Quotation>? quotations { get; set; }
        public static ISerializer<Wiktionary.Quotations> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        ISerializer IFlatBufferSerializable.Serializer => Serializer;
        ISerializer<Wiktionary.Quotations> IFlatBufferSerializable<Wiktionary.Quotations>.Serializer => Serializer;

        #region Serializer for Wiktionary.Quotations

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.GreedyMutable)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<global::Wiktionary.Quotations>
        {
            // Method generated to help AOT compilers make good decisions about generics.
            public void __AotHelper()
            {
                checked
                {
                    this.Write<ISpanWriter>(default!, new byte[10], default!, default!, default!);
                    this.Write<SpanWriter>(default!, new byte[10], default!, default!, default!);

                    this.Parse<IInputBuffer>(default!, default);
                    this.Parse<IInputBuffer2>(default!, default);
                    this.Parse<MemoryInputBuffer>(default!, default);
                    this.Parse<ReadOnlyMemoryInputBuffer>(default!, default);
                    this.Parse<ArrayInputBuffer>(default!, default);
                    this.Parse<ArraySegmentInputBuffer>(default!, default);

                    throw new InvalidOperationException("__AotHelper is not intended to be invoked");
                }
            }

            public GeneratedSerializer()
            {
                checked
                {
                    string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                    string compilerVersion = "6.3.5";

                    if (runtimeVersion != compilerVersion)
                    {
                        throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }

                    if (string.IsNullOrEmpty(runtimeVersion))
                    {
                        throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }
                }
            }

            public FlatSharp.FlatBufferDeserializationOption DeserializationOption => FlatSharp.FlatBufferDeserializationOption.GreedyMutable;


            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::Wiktionary.Quotations root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_e8292a093e0c40aaa49964ce33938f6c(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(global::Wiktionary.Quotations root)
            {
                checked
                {
                    return GetMaxSizeOf_e8292a093e0c40aaa49964ce33938f6c(root);
                }
            }

            public global::Wiktionary.Quotations Parse<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_e8292a093e0c40aaa49964ce33938f6c(buffer, args.Offset, args.DepthLimit);
                }
            }

            private static int GetMaxSizeOf_e8292a093e0c40aaa49964ce33938f6c(global::Wiktionary.Quotations value)
            {
                checked
                {

                    int runningSum = 14 + 7;
                    var index0Value = value.quotations;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_77151c9077fa4f37b09d941b9bd7f679(index0Value);
                    }
                    return runningSum;

                }
            }

            private static global::Wiktionary.Quotations Read_e8292a093e0c40aaa49964ce33938f6c<TInputBuffer>(
                TInputBuffer buffer,
                int offset,
                short remainingDepth
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {

                    return tableReader_c5bbd6f6fbb741f7b346e49465dc48bc<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
                }
            }

            private sealed class tableReader_c5bbd6f6fbb741f7b346e49465dc48bc<TInputBuffer>
                : global::Wiktionary.Quotations
                , global::FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



                private System.Collections.Generic.IList<Wiktionary.Quotation>? __index0Value;

                public static tableReader_c5bbd6f6fbb741f7b346e49465dc48bc<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
                {
                    checked
                    {

                        var item = new tableReader_c5bbd6f6fbb741f7b346e49465dc48bc<TInputBuffer>(buffer, offset, remainingDepth);
                        return item;

                    }
                }

                private tableReader_c5bbd6f6fbb741f7b346e49465dc48bc(TInputBuffer buffer, int offset, short remainingDepth) : base(__CtorContext)
                {
                    checked
                    {
                        VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                        this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Wiktionary.Quotations);
                global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;
                bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;


                public override System.Collections.Generic.IList<Wiktionary.Quotation>? quotations
                {
                    get
                    {
                        checked
                        {
                            return this.__index0Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index0Value = value;
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<Wiktionary.Quotation>? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable,
                    short remainingDepth)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 0);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_77151c9077fa4f37b09d941b9bd7f679(buffer, absoluteLocation, remainingDepth, tableMetadata_b7659b63e7c64b7ea2e45d5412bd629a.quotations);
                    }
                }
            }



            private static void WriteInlineValueOf_e8292a093e0c40aaa49964ce33938f6c<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Wiktionary.Quotations value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(11, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 4;
                    Span<byte> vtable = stackalloc byte[6];

                    var index0Value = value.quotations;

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;

                        vtableLength = 6;
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 11 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_77151c9077fa4f37b09d941b9bd7f679(spanWriter, span, index0Value!, index0Offset, context);

                    }

                }
            }

            private static class tableMetadata_b7659b63e7c64b7ea2e45d5412bd629a
            {

                public static readonly TableFieldContext quotations = new TableFieldContext(
                    "Wiktionary.Quotations.quotations",
                    false,
                    false);
            }



            private static int GetMaxSizeOf_77151c9077fa4f37b09d941b9bd7f679(global::System.Collections.Generic.IList<Wiktionary.Quotation> value)
            {
                checked
                {

                    int count = value.Count;
                    int runningSum = 14;

                    if (value is Wiktionary.Quotation[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_9d559167dcab4250bbd332c4ea04c991(current);
                        }
                    }
                    else if (value is List<Wiktionary.Quotation> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_9d559167dcab4250bbd332c4ea04c991(current);
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_9d559167dcab4250bbd332c4ea04c991(current);
                        }
                    }

                    return runningSum;
                }
            }

            private static global::System.Collections.Generic.IList<Wiktionary.Quotation> Read_77151c9077fa4f37b09d941b9bd7f679<TInputBuffer>(
                TInputBuffer buffer,
                int offset,
                short remainingDepth
                , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
            {
                checked
                {

                    return (new FlatBufferVector_3ae0dc6de8a843d287ff6a9e82349384<TInputBuffer>(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    4,
                    remainingDepth,
                    fieldContext)).FlatBufferVectorToList();
                }
            }

            public sealed class FlatBufferVector_3ae0dc6de8a843d287ff6a9e82349384<TInputBuffer> : FlatBufferVector<global::Wiktionary.Quotation, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_3ae0dc6de8a843d287ff6a9e82349384(
                    TInputBuffer memory,
                    int offset,
                    int itemSize,
                    short remainingDepth,
                    TableFieldContext fieldContext) : base(memory, offset, itemSize, remainingDepth, fieldContext)
                {
                    checked
                    {
                    }
                }

                protected override void ParseItem(
                    TInputBuffer memory,
                    int offset,
                    short remainingDepth,
                    TableFieldContext fieldContext,
                    out global::Wiktionary.Quotation item)
                {
                    checked
                    {
                        item = Read_9d559167dcab4250bbd332c4ea04c991(memory, offset, remainingDepth);
                    }
                }

                protected override void WriteThrough(global::Wiktionary.Quotation item, Span<byte> data)
                {
                    checked
                    {
                        throw new NotSupportedException("write through is not available for this type");
                    }
                }
            }



            private static void WriteInlineValueOf_77151c9077fa4f37b09d941b9bd7f679<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Collections.Generic.IList<Wiktionary.Quotation> value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset);
                    spanWriter.WriteInt(span, count, vectorOffset);
                    vectorOffset += sizeof(int);


                    if (value is Wiktionary.Quotation[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_9d559167dcab4250bbd332c4ea04c991(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                    else if (value is List<Wiktionary.Quotation> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_9d559167dcab4250bbd332c4ea04c991(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_9d559167dcab4250bbd332c4ea04c991(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                }
            }

            private static int GetMaxSizeOf_9d559167dcab4250bbd332c4ea04c991(global::Wiktionary.Quotation value)
            {
                checked
                {

                    int runningSum = 28 + 11;
                    var index0Value = value.sentence;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_4abf033cf1c746ceb1f4f28e50c36cb3(index0Value);
                    }
                    var index1Value = value.sentenceId;

                    if (!(index1Value is null))
                    {
                        runningSum += GetMaxSizeOf_4abf033cf1c746ceb1f4f28e50c36cb3(index1Value);
                    }
                    var index2Value = value.attributes;

                    if (!(index2Value is null))
                    {
                        runningSum += GetMaxSizeOf_0db69ed70dde470a8e86f3baf71da3b5(index2Value);
                    }
                    return runningSum;

                }
            }

            private static global::Wiktionary.Quotation Read_9d559167dcab4250bbd332c4ea04c991<TInputBuffer>(
                TInputBuffer buffer,
                int offset,
                short remainingDepth
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {

                    return tableReader_06e0a7200d80446ca459e112f55f088b<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
                }
            }

            private sealed class tableReader_06e0a7200d80446ca459e112f55f088b<TInputBuffer>
                : global::Wiktionary.Quotation
                , global::FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



                private System.String? __index0Value;
                private System.String? __index1Value;
                private System.Collections.Generic.IList<System.String>? __index2Value;

                public static tableReader_06e0a7200d80446ca459e112f55f088b<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
                {
                    checked
                    {

                        var item = new tableReader_06e0a7200d80446ca459e112f55f088b<TInputBuffer>(buffer, offset, remainingDepth);
                        return item;

                    }
                }

                private tableReader_06e0a7200d80446ca459e112f55f088b(TInputBuffer buffer, int offset, short remainingDepth) : base(__CtorContext)
                {
                    checked
                    {
                        VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                        this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                        this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                        this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Wiktionary.Quotation);
                global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;
                bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;


                public override System.String? sentence
                {
                    get
                    {
                        checked
                        {
                            return this.__index0Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index0Value = value;
                        }
                    }
                }

                public override System.String? sentenceId
                {
                    get
                    {
                        checked
                        {
                            return this.__index1Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index1Value = value;
                        }
                    }
                }

                public override System.Collections.Generic.IList<System.String>? attributes
                {
                    get
                    {
                        checked
                        {
                            return this.__index2Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index2Value = value;
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable,
                    short remainingDepth)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 0);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_4abf033cf1c746ceb1f4f28e50c36cb3(buffer, absoluteLocation, remainingDepth);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex1Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable,
                    short remainingDepth)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 1);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_4abf033cf1c746ceb1f4f28e50c36cb3(buffer, absoluteLocation, remainingDepth);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.String>? ReadIndex2Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable,
                    short remainingDepth)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 2);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_0db69ed70dde470a8e86f3baf71da3b5(buffer, absoluteLocation, remainingDepth, tableMetadata_9d1470fbf2ed44d5aeb86f0d3475342a.attributes);
                    }
                }
            }



            private static void WriteInlineValueOf_9d559167dcab4250bbd332c4ea04c991<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Wiktionary.Quotation value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(25, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 4;
                    Span<byte> vtable = stackalloc byte[10];

                    var index0Value = value.sentence;
                    var index1Value = value.sentenceId;
                    var index2Value = value.attributes;

                    var index2Offset = tableStart;
                    if (!(index2Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        currentOffset += 4;

                        vtableLength = 10;
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index2Offset - tableStart), 8);

                    var index1Offset = tableStart;
                    if (!(index1Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        currentOffset += 4;


                        if (8 > vtableLength)
                        {
                            vtableLength = 8;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;


                        if (6 > vtableLength)
                        {
                            vtableLength = 6;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 25 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index2Offset != tableStart)
                    {


                        WriteInlineValueOf_0db69ed70dde470a8e86f3baf71da3b5(spanWriter, span, index2Value!, index2Offset, context, tableMetadata_9d1470fbf2ed44d5aeb86f0d3475342a.attributes);

                    }


                    if (index1Offset != tableStart)
                    {


                        WriteInlineValueOf_4abf033cf1c746ceb1f4f28e50c36cb3(spanWriter, span, index1Value!, index1Offset, context, tableMetadata_9d1470fbf2ed44d5aeb86f0d3475342a.sentenceId);

                    }


                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_4abf033cf1c746ceb1f4f28e50c36cb3(spanWriter, span, index0Value!, index0Offset, context, tableMetadata_9d1470fbf2ed44d5aeb86f0d3475342a.sentence);

                    }

                }
            }

            private static class tableMetadata_9d1470fbf2ed44d5aeb86f0d3475342a
            {

                public static readonly TableFieldContext sentence = new TableFieldContext(
                    "Wiktionary.Quotation.sentence",
                    false,
                    false);

                public static readonly TableFieldContext sentenceId = new TableFieldContext(
                    "Wiktionary.Quotation.sentenceId",
                    false,
                    false);

                public static readonly TableFieldContext attributes = new TableFieldContext(
                    "Wiktionary.Quotation.attributes",
                    false,
                    false);
            }



            private static int GetMaxSizeOf_4abf033cf1c746ceb1f4f28e50c36cb3(global::System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static global::System.String Read_4abf033cf1c746ceb1f4f28e50c36cb3<TInputBuffer>(
                TInputBuffer buffer,
                int offset,
                short remainingDepth
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {

                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_4abf033cf1c746ceb1f4f28e50c36cb3<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.String value,
                int offset
                , SerializationContext context
                , TableFieldContext fieldContext) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    spanWriter.WriteString(
                        span,
                        value,
                        offset,
                        context);

                }
            }

            private static int GetMaxSizeOf_0db69ed70dde470a8e86f3baf71da3b5(global::System.Collections.Generic.IList<System.String> value)
            {
                checked
                {

                    int count = value.Count;
                    int runningSum = 14;

                    if (value is System.String[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_4abf033cf1c746ceb1f4f28e50c36cb3(current);
                        }
                    }
                    else if (value is List<System.String> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_4abf033cf1c746ceb1f4f28e50c36cb3(current);
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_4abf033cf1c746ceb1f4f28e50c36cb3(current);
                        }
                    }

                    return runningSum;
                }
            }

            private static global::System.Collections.Generic.IList<System.String> Read_0db69ed70dde470a8e86f3baf71da3b5<TInputBuffer>(
                TInputBuffer buffer,
                int offset,
                short remainingDepth
                , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
            {
                checked
                {

                    return (new FlatBufferVector_008db0c6895944bf8e23cf1b8e8258ed<TInputBuffer>(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    4,
                    remainingDepth,
                    fieldContext)).FlatBufferVectorToList();
                }
            }

            public sealed class FlatBufferVector_008db0c6895944bf8e23cf1b8e8258ed<TInputBuffer> : FlatBufferVector<global::System.String, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_008db0c6895944bf8e23cf1b8e8258ed(
                    TInputBuffer memory,
                    int offset,
                    int itemSize,
                    short remainingDepth,
                    TableFieldContext fieldContext) : base(memory, offset, itemSize, remainingDepth, fieldContext)
                {
                    checked
                    {
                    }
                }

                protected override void ParseItem(
                    TInputBuffer memory,
                    int offset,
                    short remainingDepth,
                    TableFieldContext fieldContext,
                    out global::System.String item)
                {
                    checked
                    {
                        item = Read_4abf033cf1c746ceb1f4f28e50c36cb3(memory, offset, remainingDepth);
                    }
                }

                protected override void WriteThrough(global::System.String item, Span<byte> data)
                {
                    checked
                    {
                        throw new NotSupportedException("write through is not available for this type");
                    }
                }
            }



            private static void WriteInlineValueOf_0db69ed70dde470a8e86f3baf71da3b5<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Collections.Generic.IList<System.String> value,
                int offset
                , SerializationContext context
                , TableFieldContext fieldContext) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset);
                    spanWriter.WriteInt(span, count, vectorOffset);
                    vectorOffset += sizeof(int);


                    if (value is System.String[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_4abf033cf1c746ceb1f4f28e50c36cb3(spanWriter, span, current, vectorOffset, context, fieldContext);
                            vectorOffset += 4;
                        }
                    }
                    else if (value is List<System.String> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_4abf033cf1c746ceb1f4f28e50c36cb3(spanWriter, span, current, vectorOffset, context, fieldContext);
                            vectorOffset += 4;
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_4abf033cf1c746ceb1f4f28e50c36cb3(spanWriter, span, current, vectorOffset, context, fieldContext);
                            vectorOffset += 4;
                        }
                    }
                }
            }
        }

        #endregion
    }

}

namespace Wiktionary
{
    [FlatBufferTable()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class RawQuotation
        : object
    {
#pragma warning disable CS8618
        public RawQuotation()
        {
            checked
            {
                this.quotation = default!;
                this.quotationAttributes = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected RawQuotation(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public RawQuotation(RawQuotation source)
        {
            checked
            {
                this.quotation = FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone(source.quotation);
                this.quotationAttributes = FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone(source.quotationAttributes);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);


        [FlatBufferItemAttribute(0)]
        public virtual string? quotation { get; set; }

        [FlatBufferItemAttribute(1)]
        public virtual IList<string>? quotationAttributes { get; set; }
    }

}

namespace Wiktionary
{
    [FlatBufferTable()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Sense
        : object
    {
#pragma warning disable CS8618
        public Sense()
        {
            checked
            {
                this.senseId = default!;
                this.word = default!;
                this.gloss = default!;
                this.pos = default!;
                this.tags = default!;
                this.examples = default!;
                this.quotations = default!;
                this.synonyms = default!;
                this.depth = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected Sense(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public Sense(Sense source)
        {
            checked
            {
                this.senseId = FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone(source.senseId);
                this.word = FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone(source.word);
                this.gloss = FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone(source.gloss);
                this.pos = FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone(source.pos);
                this.tags = FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone(source.tags);
                this.examples = FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone(source.examples);
                this.quotations = FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone(source.quotations);
                this.synonyms = FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone(source.synonyms);
                this.depth = FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone(source.depth);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);


        [FlatBufferItemAttribute(0)]
        public virtual string? senseId { get; set; }

        [FlatBufferItemAttribute(1)]
        public virtual string? word { get; set; }

        [FlatBufferItemAttribute(2)]
        public virtual string? gloss { get; set; }

        [FlatBufferItemAttribute(3)]
        public virtual string? pos { get; set; }

        [FlatBufferItemAttribute(4)]
        public virtual IList<string>? tags { get; set; }

        [FlatBufferItemAttribute(5)]
        public virtual IList<string>? examples { get; set; }

        [FlatBufferItemAttribute(6)]
        public virtual IList<Wiktionary.RawQuotation>? quotations { get; set; }

        [FlatBufferItemAttribute(7)]
        public virtual IList<string>? synonyms { get; set; }

        [FlatBufferItemAttribute(8)]
        public virtual sbyte depth { get; set; }
    }

}

namespace Wiktionary
{
    [FlatBufferTable()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Senses
        : object
        , IFlatBufferSerializable<Wiktionary.Senses>
    {
#pragma warning disable CS8618
        public Senses()
        {
            checked
            {
                this.senses = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected Senses(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public Senses(Senses source)
        {
            checked
            {
                this.senses = FlatSharp.Compiler.Generated.CloneHelpers_c3d5c57828674c6bb615f4eb3f2e6433.Clone(source.senses);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);


        [FlatBufferItemAttribute(0)]
        public virtual IList<Wiktionary.Sense>? senses { get; set; }
        public static ISerializer<Wiktionary.Senses> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        ISerializer IFlatBufferSerializable.Serializer => Serializer;
        ISerializer<Wiktionary.Senses> IFlatBufferSerializable<Wiktionary.Senses>.Serializer => Serializer;

        #region Serializer for Wiktionary.Senses

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.GreedyMutable)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<global::Wiktionary.Senses>
        {
            // Method generated to help AOT compilers make good decisions about generics.
            public void __AotHelper()
            {
                checked
                {
                    this.Write<ISpanWriter>(default!, new byte[10], default!, default!, default!);
                    this.Write<SpanWriter>(default!, new byte[10], default!, default!, default!);

                    this.Parse<IInputBuffer>(default!, default);
                    this.Parse<IInputBuffer2>(default!, default);
                    this.Parse<MemoryInputBuffer>(default!, default);
                    this.Parse<ReadOnlyMemoryInputBuffer>(default!, default);
                    this.Parse<ArrayInputBuffer>(default!, default);
                    this.Parse<ArraySegmentInputBuffer>(default!, default);

                    throw new InvalidOperationException("__AotHelper is not intended to be invoked");
                }
            }

            public GeneratedSerializer()
            {
                checked
                {
                    string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                    string compilerVersion = "6.3.5";

                    if (runtimeVersion != compilerVersion)
                    {
                        throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }

                    if (string.IsNullOrEmpty(runtimeVersion))
                    {
                        throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }
                }
            }

            public FlatSharp.FlatBufferDeserializationOption DeserializationOption => FlatSharp.FlatBufferDeserializationOption.GreedyMutable;


            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::Wiktionary.Senses root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_ac42d2c520454c449f50b3ad2745aa2b(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(global::Wiktionary.Senses root)
            {
                checked
                {
                    return GetMaxSizeOf_ac42d2c520454c449f50b3ad2745aa2b(root);
                }
            }

            public global::Wiktionary.Senses Parse<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_ac42d2c520454c449f50b3ad2745aa2b(buffer, args.Offset, args.DepthLimit);
                }
            }

            private static int GetMaxSizeOf_ac42d2c520454c449f50b3ad2745aa2b(global::Wiktionary.Senses value)
            {
                checked
                {

                    int runningSum = 14 + 7;
                    var index0Value = value.senses;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_29f0a1e9006549c8add9232ec968703d(index0Value);
                    }
                    return runningSum;

                }
            }

            private static global::Wiktionary.Senses Read_ac42d2c520454c449f50b3ad2745aa2b<TInputBuffer>(
                TInputBuffer buffer,
                int offset,
                short remainingDepth
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {

                    return tableReader_c2a176eaa4574ff99bce61fb76b841cb<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
                }
            }

            private sealed class tableReader_c2a176eaa4574ff99bce61fb76b841cb<TInputBuffer>
                : global::Wiktionary.Senses
                , global::FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



                private System.Collections.Generic.IList<Wiktionary.Sense>? __index0Value;

                public static tableReader_c2a176eaa4574ff99bce61fb76b841cb<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
                {
                    checked
                    {

                        var item = new tableReader_c2a176eaa4574ff99bce61fb76b841cb<TInputBuffer>(buffer, offset, remainingDepth);
                        return item;

                    }
                }

                private tableReader_c2a176eaa4574ff99bce61fb76b841cb(TInputBuffer buffer, int offset, short remainingDepth) : base(__CtorContext)
                {
                    checked
                    {
                        VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                        this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Wiktionary.Senses);
                global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;
                bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;


                public override System.Collections.Generic.IList<Wiktionary.Sense>? senses
                {
                    get
                    {
                        checked
                        {
                            return this.__index0Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index0Value = value;
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<Wiktionary.Sense>? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable,
                    short remainingDepth)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 0);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_29f0a1e9006549c8add9232ec968703d(buffer, absoluteLocation, remainingDepth, tableMetadata_06563a36e59f4b44871f5cb50404e153.senses);
                    }
                }
            }



            private static void WriteInlineValueOf_ac42d2c520454c449f50b3ad2745aa2b<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Wiktionary.Senses value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(11, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 4;
                    Span<byte> vtable = stackalloc byte[6];

                    var index0Value = value.senses;

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;

                        vtableLength = 6;
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 11 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_29f0a1e9006549c8add9232ec968703d(spanWriter, span, index0Value!, index0Offset, context);

                    }

                }
            }

            private static class tableMetadata_06563a36e59f4b44871f5cb50404e153
            {

                public static readonly TableFieldContext senses = new TableFieldContext(
                    "Wiktionary.Senses.senses",
                    false,
                    false);
            }



            private static int GetMaxSizeOf_29f0a1e9006549c8add9232ec968703d(global::System.Collections.Generic.IList<Wiktionary.Sense> value)
            {
                checked
                {

                    int count = value.Count;
                    int runningSum = 14;

                    if (value is Wiktionary.Sense[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_562c7ade0b554e0c845c12b0bbec3e5d(current);
                        }
                    }
                    else if (value is List<Wiktionary.Sense> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_562c7ade0b554e0c845c12b0bbec3e5d(current);
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_562c7ade0b554e0c845c12b0bbec3e5d(current);
                        }
                    }

                    return runningSum;
                }
            }

            private static global::System.Collections.Generic.IList<Wiktionary.Sense> Read_29f0a1e9006549c8add9232ec968703d<TInputBuffer>(
                TInputBuffer buffer,
                int offset,
                short remainingDepth
                , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
            {
                checked
                {

                    return (new FlatBufferVector_7f0cbbd3f89447cfb2914d32c7ada448<TInputBuffer>(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    4,
                    remainingDepth,
                    fieldContext)).FlatBufferVectorToList();
                }
            }

            public sealed class FlatBufferVector_7f0cbbd3f89447cfb2914d32c7ada448<TInputBuffer> : FlatBufferVector<global::Wiktionary.Sense, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_7f0cbbd3f89447cfb2914d32c7ada448(
                    TInputBuffer memory,
                    int offset,
                    int itemSize,
                    short remainingDepth,
                    TableFieldContext fieldContext) : base(memory, offset, itemSize, remainingDepth, fieldContext)
                {
                    checked
                    {
                    }
                }

                protected override void ParseItem(
                    TInputBuffer memory,
                    int offset,
                    short remainingDepth,
                    TableFieldContext fieldContext,
                    out global::Wiktionary.Sense item)
                {
                    checked
                    {
                        item = Read_562c7ade0b554e0c845c12b0bbec3e5d(memory, offset, remainingDepth);
                    }
                }

                protected override void WriteThrough(global::Wiktionary.Sense item, Span<byte> data)
                {
                    checked
                    {
                        throw new NotSupportedException("write through is not available for this type");
                    }
                }
            }



            private static void WriteInlineValueOf_29f0a1e9006549c8add9232ec968703d<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Collections.Generic.IList<Wiktionary.Sense> value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset);
                    spanWriter.WriteInt(span, count, vectorOffset);
                    vectorOffset += sizeof(int);


                    if (value is Wiktionary.Sense[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_562c7ade0b554e0c845c12b0bbec3e5d(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                    else if (value is List<Wiktionary.Sense> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_562c7ade0b554e0c845c12b0bbec3e5d(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_562c7ade0b554e0c845c12b0bbec3e5d(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                }
            }

            private static int GetMaxSizeOf_562c7ade0b554e0c845c12b0bbec3e5d(global::Wiktionary.Sense value)
            {
                checked
                {

                    int runningSum = 64 + 23;
                    var index0Value = value.senseId;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_8ddc37b65fc4409d99809d24f8548ad8(index0Value);
                    }
                    var index1Value = value.word;

                    if (!(index1Value is null))
                    {
                        runningSum += GetMaxSizeOf_8ddc37b65fc4409d99809d24f8548ad8(index1Value);
                    }
                    var index2Value = value.gloss;

                    if (!(index2Value is null))
                    {
                        runningSum += GetMaxSizeOf_8ddc37b65fc4409d99809d24f8548ad8(index2Value);
                    }
                    var index3Value = value.pos;

                    if (!(index3Value is null))
                    {
                        runningSum += GetMaxSizeOf_8ddc37b65fc4409d99809d24f8548ad8(index3Value);
                    }
                    var index4Value = value.tags;

                    if (!(index4Value is null))
                    {
                        runningSum += GetMaxSizeOf_912e6befbe0a4f66983890cfb65afa20(index4Value);
                    }
                    var index5Value = value.examples;

                    if (!(index5Value is null))
                    {
                        runningSum += GetMaxSizeOf_912e6befbe0a4f66983890cfb65afa20(index5Value);
                    }
                    var index6Value = value.quotations;

                    if (!(index6Value is null))
                    {
                        runningSum += GetMaxSizeOf_ab86ac644239492ab651df04ef216fd6(index6Value);
                    }
                    var index7Value = value.synonyms;

                    if (!(index7Value is null))
                    {
                        runningSum += GetMaxSizeOf_912e6befbe0a4f66983890cfb65afa20(index7Value);
                    }
                    return runningSum;

                }
            }

            private static global::Wiktionary.Sense Read_562c7ade0b554e0c845c12b0bbec3e5d<TInputBuffer>(
                TInputBuffer buffer,
                int offset,
                short remainingDepth
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {

                    return tableReader_d436a6850df74156a50d9e069d1609de<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
                }
            }

            private sealed class tableReader_d436a6850df74156a50d9e069d1609de<TInputBuffer>
                : global::Wiktionary.Sense
                , global::FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



                private System.String? __index0Value;
                private System.String? __index1Value;
                private System.String? __index2Value;
                private System.String? __index3Value;
                private System.Collections.Generic.IList<System.String>? __index4Value;
                private System.Collections.Generic.IList<System.String>? __index5Value;
                private System.Collections.Generic.IList<Wiktionary.RawQuotation>? __index6Value;
                private System.Collections.Generic.IList<System.String>? __index7Value;
                private System.SByte __index8Value;

                public static tableReader_d436a6850df74156a50d9e069d1609de<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
                {
                    checked
                    {

                        var item = new tableReader_d436a6850df74156a50d9e069d1609de<TInputBuffer>(buffer, offset, remainingDepth);
                        return item;

                    }
                }

                private tableReader_d436a6850df74156a50d9e069d1609de(TInputBuffer buffer, int offset, short remainingDepth) : base(__CtorContext)
                {
                    checked
                    {
                        VTableGeneric.Create<TInputBuffer>(buffer, offset, out var vtable);
                        this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                        this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                        this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                        this.__index3Value = ReadIndex3Value(buffer, offset, vtable, remainingDepth);
                        this.__index4Value = ReadIndex4Value(buffer, offset, vtable, remainingDepth);
                        this.__index5Value = ReadIndex5Value(buffer, offset, vtable, remainingDepth);
                        this.__index6Value = ReadIndex6Value(buffer, offset, vtable, remainingDepth);
                        this.__index7Value = ReadIndex7Value(buffer, offset, vtable, remainingDepth);
                        this.__index8Value = ReadIndex8Value(buffer, offset, vtable, remainingDepth);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Wiktionary.Sense);
                global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;
                bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;


                public override System.String? senseId
                {
                    get
                    {
                        checked
                        {
                            return this.__index0Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index0Value = value;
                        }
                    }
                }

                public override System.String? word
                {
                    get
                    {
                        checked
                        {
                            return this.__index1Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index1Value = value;
                        }
                    }
                }

                public override System.String? gloss
                {
                    get
                    {
                        checked
                        {
                            return this.__index2Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index2Value = value;
                        }
                    }
                }

                public override System.String? pos
                {
                    get
                    {
                        checked
                        {
                            return this.__index3Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index3Value = value;
                        }
                    }
                }

                public override System.Collections.Generic.IList<System.String>? tags
                {
                    get
                    {
                        checked
                        {
                            return this.__index4Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index4Value = value;
                        }
                    }
                }

                public override System.Collections.Generic.IList<System.String>? examples
                {
                    get
                    {
                        checked
                        {
                            return this.__index5Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index5Value = value;
                        }
                    }
                }

                public override System.Collections.Generic.IList<Wiktionary.RawQuotation>? quotations
                {
                    get
                    {
                        checked
                        {
                            return this.__index6Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index6Value = value;
                        }
                    }
                }

                public override System.Collections.Generic.IList<System.String>? synonyms
                {
                    get
                    {
                        checked
                        {
                            return this.__index7Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index7Value = value;
                        }
                    }
                }

                public override System.SByte depth
                {
                    get
                    {
                        checked
                        {
                            return this.__index8Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index8Value = value;
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    VTableGeneric vtable,
                    short remainingDepth)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 0);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_8ddc37b65fc4409d99809d24f8548ad8(buffer, absoluteLocation, remainingDepth);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex1Value(
                    TInputBuffer buffer,
                    int offset,
                    VTableGeneric vtable,
                    short remainingDepth)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 1);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_8ddc37b65fc4409d99809d24f8548ad8(buffer, absoluteLocation, remainingDepth);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex2Value(
                    TInputBuffer buffer,
                    int offset,
                    VTableGeneric vtable,
                    short remainingDepth)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 2);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_8ddc37b65fc4409d99809d24f8548ad8(buffer, absoluteLocation, remainingDepth);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex3Value(
                    TInputBuffer buffer,
                    int offset,
                    VTableGeneric vtable,
                    short remainingDepth)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 3);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_8ddc37b65fc4409d99809d24f8548ad8(buffer, absoluteLocation, remainingDepth);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.String>? ReadIndex4Value(
                    TInputBuffer buffer,
                    int offset,
                    VTableGeneric vtable,
                    short remainingDepth)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 4);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_912e6befbe0a4f66983890cfb65afa20(buffer, absoluteLocation, remainingDepth, tableMetadata_031866103238449cbb7800a1fde763ed.tags);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.String>? ReadIndex5Value(
                    TInputBuffer buffer,
                    int offset,
                    VTableGeneric vtable,
                    short remainingDepth)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 5);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_912e6befbe0a4f66983890cfb65afa20(buffer, absoluteLocation, remainingDepth, tableMetadata_031866103238449cbb7800a1fde763ed.examples);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<Wiktionary.RawQuotation>? ReadIndex6Value(
                    TInputBuffer buffer,
                    int offset,
                    VTableGeneric vtable,
                    short remainingDepth)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 6);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_ab86ac644239492ab651df04ef216fd6(buffer, absoluteLocation, remainingDepth, tableMetadata_031866103238449cbb7800a1fde763ed.quotations);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.String>? ReadIndex7Value(
                    TInputBuffer buffer,
                    int offset,
                    VTableGeneric vtable,
                    short remainingDepth)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 7);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_912e6befbe0a4f66983890cfb65afa20(buffer, absoluteLocation, remainingDepth, tableMetadata_031866103238449cbb7800a1fde763ed.synonyms);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.SByte ReadIndex8Value(
                    TInputBuffer buffer,
                    int offset,
                    VTableGeneric vtable,
                    short remainingDepth)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 8);
                            if (relativeOffset == 0)
                            {
                                return default(System.SByte);
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_69e81a97ed144b2788eb8c49edc663c1(buffer, absoluteLocation, remainingDepth);
                    }
                }
            }



            private static void WriteInlineValueOf_562c7ade0b554e0c845c12b0bbec3e5d<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Wiktionary.Sense value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(61, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 4;
                    Span<byte> vtable = stackalloc byte[22];

                    var index0Value = value.senseId;
                    var index1Value = value.word;
                    var index2Value = value.gloss;
                    var index3Value = value.pos;
                    var index4Value = value.tags;
                    var index5Value = value.examples;
                    var index6Value = value.quotations;
                    var index7Value = value.synonyms;
                    var index8Value = value.depth;

                    var index7Offset = tableStart;
                    if (!(index7Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index7Offset = currentOffset;
                        currentOffset += 4;


                        if (20 > vtableLength)
                        {
                            vtableLength = 20;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index7Offset - tableStart), 18);

                    var index6Offset = tableStart;
                    if (!(index6Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index6Offset = currentOffset;
                        currentOffset += 4;


                        if (18 > vtableLength)
                        {
                            vtableLength = 18;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index6Offset - tableStart), 16);

                    var index5Offset = tableStart;
                    if (!(index5Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index5Offset = currentOffset;
                        currentOffset += 4;


                        if (16 > vtableLength)
                        {
                            vtableLength = 16;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index5Offset - tableStart), 14);

                    var index4Offset = tableStart;
                    if (!(index4Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index4Offset = currentOffset;
                        currentOffset += 4;


                        if (14 > vtableLength)
                        {
                            vtableLength = 14;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index4Offset - tableStart), 12);

                    var index3Offset = tableStart;
                    if (!(index3Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index3Offset = currentOffset;
                        currentOffset += 4;


                        if (12 > vtableLength)
                        {
                            vtableLength = 12;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index3Offset - tableStart), 10);

                    var index2Offset = tableStart;
                    if (!(index2Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        currentOffset += 4;


                        if (10 > vtableLength)
                        {
                            vtableLength = 10;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index2Offset - tableStart), 8);

                    var index1Offset = tableStart;
                    if (!(index1Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        currentOffset += 4;


                        if (8 > vtableLength)
                        {
                            vtableLength = 8;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;


                        if (6 > vtableLength)
                        {
                            vtableLength = 6;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);

                    var index8Offset = tableStart;
                    if (index8Value != default(System.SByte))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index8Offset = currentOffset;
                        currentOffset += 1;


                        WriteInlineValueOf_69e81a97ed144b2788eb8c49edc663c1(spanWriter, span, index8Value, index8Offset);

                        vtableLength = 22;
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index8Offset - tableStart), 20);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 61 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index7Offset != tableStart)
                    {


                        WriteInlineValueOf_912e6befbe0a4f66983890cfb65afa20(spanWriter, span, index7Value!, index7Offset, context, tableMetadata_031866103238449cbb7800a1fde763ed.synonyms);

                    }


                    if (index6Offset != tableStart)
                    {


                        WriteInlineValueOf_ab86ac644239492ab651df04ef216fd6(spanWriter, span, index6Value!, index6Offset, context);

                    }


                    if (index5Offset != tableStart)
                    {


                        WriteInlineValueOf_912e6befbe0a4f66983890cfb65afa20(spanWriter, span, index5Value!, index5Offset, context, tableMetadata_031866103238449cbb7800a1fde763ed.examples);

                    }


                    if (index4Offset != tableStart)
                    {


                        WriteInlineValueOf_912e6befbe0a4f66983890cfb65afa20(spanWriter, span, index4Value!, index4Offset, context, tableMetadata_031866103238449cbb7800a1fde763ed.tags);

                    }


                    if (index3Offset != tableStart)
                    {


                        WriteInlineValueOf_8ddc37b65fc4409d99809d24f8548ad8(spanWriter, span, index3Value!, index3Offset, context, tableMetadata_031866103238449cbb7800a1fde763ed.pos);

                    }


                    if (index2Offset != tableStart)
                    {


                        WriteInlineValueOf_8ddc37b65fc4409d99809d24f8548ad8(spanWriter, span, index2Value!, index2Offset, context, tableMetadata_031866103238449cbb7800a1fde763ed.gloss);

                    }


                    if (index1Offset != tableStart)
                    {


                        WriteInlineValueOf_8ddc37b65fc4409d99809d24f8548ad8(spanWriter, span, index1Value!, index1Offset, context, tableMetadata_031866103238449cbb7800a1fde763ed.word);

                    }


                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_8ddc37b65fc4409d99809d24f8548ad8(spanWriter, span, index0Value!, index0Offset, context, tableMetadata_031866103238449cbb7800a1fde763ed.senseId);

                    }

                }
            }

            private static class tableMetadata_031866103238449cbb7800a1fde763ed
            {

                public static readonly TableFieldContext senseId = new TableFieldContext(
                    "Wiktionary.Sense.senseId",
                    false,
                    false);

                public static readonly TableFieldContext word = new TableFieldContext(
                    "Wiktionary.Sense.word",
                    false,
                    false);

                public static readonly TableFieldContext gloss = new TableFieldContext(
                    "Wiktionary.Sense.gloss",
                    false,
                    false);

                public static readonly TableFieldContext pos = new TableFieldContext(
                    "Wiktionary.Sense.pos",
                    false,
                    false);

                public static readonly TableFieldContext tags = new TableFieldContext(
                    "Wiktionary.Sense.tags",
                    false,
                    false);

                public static readonly TableFieldContext examples = new TableFieldContext(
                    "Wiktionary.Sense.examples",
                    false,
                    false);

                public static readonly TableFieldContext quotations = new TableFieldContext(
                    "Wiktionary.Sense.quotations",
                    false,
                    false);

                public static readonly TableFieldContext synonyms = new TableFieldContext(
                    "Wiktionary.Sense.synonyms",
                    false,
                    false);

                public static readonly TableFieldContext depth = new TableFieldContext(
                    "Wiktionary.Sense.depth",
                    false,
                    false);
            }



            private static int GetMaxSizeOf_8ddc37b65fc4409d99809d24f8548ad8(global::System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static global::System.String Read_8ddc37b65fc4409d99809d24f8548ad8<TInputBuffer>(
                TInputBuffer buffer,
                int offset,
                short remainingDepth
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {

                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_8ddc37b65fc4409d99809d24f8548ad8<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.String value,
                int offset
                , SerializationContext context
                , TableFieldContext fieldContext) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    spanWriter.WriteString(
                        span,
                        value,
                        offset,
                        context);

                }
            }

            private static int GetMaxSizeOf_912e6befbe0a4f66983890cfb65afa20(global::System.Collections.Generic.IList<System.String> value)
            {
                checked
                {

                    int count = value.Count;
                    int runningSum = 14;

                    if (value is System.String[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_8ddc37b65fc4409d99809d24f8548ad8(current);
                        }
                    }
                    else if (value is List<System.String> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_8ddc37b65fc4409d99809d24f8548ad8(current);
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_8ddc37b65fc4409d99809d24f8548ad8(current);
                        }
                    }

                    return runningSum;
                }
            }

            private static global::System.Collections.Generic.IList<System.String> Read_912e6befbe0a4f66983890cfb65afa20<TInputBuffer>(
                TInputBuffer buffer,
                int offset,
                short remainingDepth
                , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
            {
                checked
                {

                    return (new FlatBufferVector_99a41fecc67f4d788f0fb94c07117280<TInputBuffer>(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    4,
                    remainingDepth,
                    fieldContext)).FlatBufferVectorToList();
                }
            }

            public sealed class FlatBufferVector_99a41fecc67f4d788f0fb94c07117280<TInputBuffer> : FlatBufferVector<global::System.String, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_99a41fecc67f4d788f0fb94c07117280(
                    TInputBuffer memory,
                    int offset,
                    int itemSize,
                    short remainingDepth,
                    TableFieldContext fieldContext) : base(memory, offset, itemSize, remainingDepth, fieldContext)
                {
                    checked
                    {
                    }
                }

                protected override void ParseItem(
                    TInputBuffer memory,
                    int offset,
                    short remainingDepth,
                    TableFieldContext fieldContext,
                    out global::System.String item)
                {
                    checked
                    {
                        item = Read_8ddc37b65fc4409d99809d24f8548ad8(memory, offset, remainingDepth);
                    }
                }

                protected override void WriteThrough(global::System.String item, Span<byte> data)
                {
                    checked
                    {
                        throw new NotSupportedException("write through is not available for this type");
                    }
                }
            }



            private static void WriteInlineValueOf_912e6befbe0a4f66983890cfb65afa20<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Collections.Generic.IList<System.String> value,
                int offset
                , SerializationContext context
                , TableFieldContext fieldContext) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset);
                    spanWriter.WriteInt(span, count, vectorOffset);
                    vectorOffset += sizeof(int);


                    if (value is System.String[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_8ddc37b65fc4409d99809d24f8548ad8(spanWriter, span, current, vectorOffset, context, fieldContext);
                            vectorOffset += 4;
                        }
                    }
                    else if (value is List<System.String> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_8ddc37b65fc4409d99809d24f8548ad8(spanWriter, span, current, vectorOffset, context, fieldContext);
                            vectorOffset += 4;
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_8ddc37b65fc4409d99809d24f8548ad8(spanWriter, span, current, vectorOffset, context, fieldContext);
                            vectorOffset += 4;
                        }
                    }
                }
            }

            private static int GetMaxSizeOf_ab86ac644239492ab651df04ef216fd6(global::System.Collections.Generic.IList<Wiktionary.RawQuotation> value)
            {
                checked
                {

                    int count = value.Count;
                    int runningSum = 14;

                    if (value is Wiktionary.RawQuotation[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_b3f27968d5cc42629e3a7ba358d9a312(current);
                        }
                    }
                    else if (value is List<Wiktionary.RawQuotation> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_b3f27968d5cc42629e3a7ba358d9a312(current);
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_b3f27968d5cc42629e3a7ba358d9a312(current);
                        }
                    }

                    return runningSum;
                }
            }

            private static global::System.Collections.Generic.IList<Wiktionary.RawQuotation> Read_ab86ac644239492ab651df04ef216fd6<TInputBuffer>(
                TInputBuffer buffer,
                int offset,
                short remainingDepth
                , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
            {
                checked
                {

                    return (new FlatBufferVector_a3656bc638314cf581efd84939b39345<TInputBuffer>(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    4,
                    remainingDepth,
                    fieldContext)).FlatBufferVectorToList();
                }
            }

            public sealed class FlatBufferVector_a3656bc638314cf581efd84939b39345<TInputBuffer> : FlatBufferVector<global::Wiktionary.RawQuotation, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_a3656bc638314cf581efd84939b39345(
                    TInputBuffer memory,
                    int offset,
                    int itemSize,
                    short remainingDepth,
                    TableFieldContext fieldContext) : base(memory, offset, itemSize, remainingDepth, fieldContext)
                {
                    checked
                    {
                    }
                }

                protected override void ParseItem(
                    TInputBuffer memory,
                    int offset,
                    short remainingDepth,
                    TableFieldContext fieldContext,
                    out global::Wiktionary.RawQuotation item)
                {
                    checked
                    {
                        item = Read_b3f27968d5cc42629e3a7ba358d9a312(memory, offset, remainingDepth);
                    }
                }

                protected override void WriteThrough(global::Wiktionary.RawQuotation item, Span<byte> data)
                {
                    checked
                    {
                        throw new NotSupportedException("write through is not available for this type");
                    }
                }
            }



            private static void WriteInlineValueOf_ab86ac644239492ab651df04ef216fd6<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Collections.Generic.IList<Wiktionary.RawQuotation> value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset);
                    spanWriter.WriteInt(span, count, vectorOffset);
                    vectorOffset += sizeof(int);


                    if (value is Wiktionary.RawQuotation[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_b3f27968d5cc42629e3a7ba358d9a312(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                    else if (value is List<Wiktionary.RawQuotation> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_b3f27968d5cc42629e3a7ba358d9a312(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_b3f27968d5cc42629e3a7ba358d9a312(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_69e81a97ed144b2788eb8c49edc663c1(global::System.SByte value)
            {
                checked
                {
                    return 1;
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::System.SByte Read_69e81a97ed144b2788eb8c49edc663c1<TInputBuffer>(
                TInputBuffer buffer,
                int offset,
                short remainingDepth
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {

                    return buffer.ReadSByte(offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_69e81a97ed144b2788eb8c49edc663c1<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.SByte value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteSByte(span, value, offset);
                }
            }

            private static int GetMaxSizeOf_b3f27968d5cc42629e3a7ba358d9a312(global::Wiktionary.RawQuotation value)
            {
                checked
                {

                    int runningSum = 21 + 9;
                    var index0Value = value.quotation;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_8ddc37b65fc4409d99809d24f8548ad8(index0Value);
                    }
                    var index1Value = value.quotationAttributes;

                    if (!(index1Value is null))
                    {
                        runningSum += GetMaxSizeOf_912e6befbe0a4f66983890cfb65afa20(index1Value);
                    }
                    return runningSum;

                }
            }

            private static global::Wiktionary.RawQuotation Read_b3f27968d5cc42629e3a7ba358d9a312<TInputBuffer>(
                TInputBuffer buffer,
                int offset,
                short remainingDepth
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {

                    return tableReader_e98a9a61c1d640ea87efc9d4c08fa16f<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
                }
            }

            private sealed class tableReader_e98a9a61c1d640ea87efc9d4c08fa16f<TInputBuffer>
                : global::Wiktionary.RawQuotation
                , global::FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



                private System.String? __index0Value;
                private System.Collections.Generic.IList<System.String>? __index1Value;

                public static tableReader_e98a9a61c1d640ea87efc9d4c08fa16f<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
                {
                    checked
                    {

                        var item = new tableReader_e98a9a61c1d640ea87efc9d4c08fa16f<TInputBuffer>(buffer, offset, remainingDepth);
                        return item;

                    }
                }

                private tableReader_e98a9a61c1d640ea87efc9d4c08fa16f(TInputBuffer buffer, int offset, short remainingDepth) : base(__CtorContext)
                {
                    checked
                    {
                        VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                        this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                        this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Wiktionary.RawQuotation);
                global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;
                bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;


                public override System.String? quotation
                {
                    get
                    {
                        checked
                        {
                            return this.__index0Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index0Value = value;
                        }
                    }
                }

                public override System.Collections.Generic.IList<System.String>? quotationAttributes
                {
                    get
                    {
                        checked
                        {
                            return this.__index1Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index1Value = value;
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable,
                    short remainingDepth)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 0);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_8ddc37b65fc4409d99809d24f8548ad8(buffer, absoluteLocation, remainingDepth);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.String>? ReadIndex1Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable,
                    short remainingDepth)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 1);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_912e6befbe0a4f66983890cfb65afa20(buffer, absoluteLocation, remainingDepth, tableMetadata_14dd6a06ba854014866d10d0a3df540f.quotationAttributes);
                    }
                }
            }



            private static void WriteInlineValueOf_b3f27968d5cc42629e3a7ba358d9a312<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Wiktionary.RawQuotation value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(18, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 4;
                    Span<byte> vtable = stackalloc byte[8];

                    var index0Value = value.quotation;
                    var index1Value = value.quotationAttributes;

                    var index1Offset = tableStart;
                    if (!(index1Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        currentOffset += 4;

                        vtableLength = 8;
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;


                        if (6 > vtableLength)
                        {
                            vtableLength = 6;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 18 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index1Offset != tableStart)
                    {


                        WriteInlineValueOf_912e6befbe0a4f66983890cfb65afa20(spanWriter, span, index1Value!, index1Offset, context, tableMetadata_14dd6a06ba854014866d10d0a3df540f.quotationAttributes);

                    }


                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_8ddc37b65fc4409d99809d24f8548ad8(spanWriter, span, index0Value!, index0Offset, context, tableMetadata_14dd6a06ba854014866d10d0a3df540f.quotation);

                    }

                }
            }

            private static class tableMetadata_14dd6a06ba854014866d10d0a3df540f
            {

                public static readonly TableFieldContext quotation = new TableFieldContext(
                    "Wiktionary.RawQuotation.quotation",
                    false,
                    false);

                public static readonly TableFieldContext quotationAttributes = new TableFieldContext(
                    "Wiktionary.RawQuotation.quotationAttributes",
                    false,
                    false);
            }

        }

        #endregion
    }

}

